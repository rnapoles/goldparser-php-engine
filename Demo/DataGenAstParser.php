<?php

/*
Grammar Name    : DataGenAstParser 
Version         : 0.1 
Author          : Reinier Napoles Martinez 
About           : Case Sensitive  : True 
Start Symbol    : 20 

Output File      : DataGenAstParser.php 
Output File Base : DataGenAstParser 

This file was generated by the Gold Parser.
The template is PHP OO Engine

*/

use Gold\Engine\ActionStruct;
use Gold\Engine\ContextStruct;
use Gold\Engine\DfaEdgeStruct;   
use Gold\Engine\DfaStateStruct;  
use Gold\Engine\GrammarStruct;   
use Gold\Engine\LalrStateStruct; 
use Gold\Engine\RuleStruct;      
use Gold\Engine\SymbolStruct;    
use Gold\Engine\TokenStackStruct;
use Gold\Engine\TokenStruct;     
use Gold\AbstractParser;

use Node\CalculationsNode;
use Node\ExpressionNode;
use Node\AddExprNode;
use Node\MulExprNode;
use Node\FactorNode;
use Node\AddOpNode;
use Node\MulOpNode;
use Node\ParamsNode;
use Node\SynErrorNode;
use Node\DecLiteralNode;
use Node\FloatLiteralNode;
use Node\StringLiteralNode;
use Node\IdNode;

class DataGenAstParser extends AbstractParser {

	function Run(){

		$Context = new ContextStruct();
		$Result = $this->Parse();

		/* Interpret the results. */
		if ($Result != self::PARSEACCEPT) {
		  $this->ShowErrorMessage($Result);
		} else {

			/* Initialize the Context. */
			$Context->Debug = $this->Debug;
			$Context->Indent = 0;
			$Context->ReturnValue = NULL;

			/* Start execution by calling the subroutine of the first Token on
			 the TokenStack. It's the "Start Symbol" that is defined in the
			 $Grammar-> 
			*/
			$fn = $this->RuleJumpTable[$this->FirstToken->ReductionRule];
			$this->Result = $this->$fn($this->FirstToken,$Context);
		}

	}

	function RuleTemplate(TokenStruct $Token,ContextStruct $Context) {
		
		$i = 0;

		/* Debugging: show the description of the rule. */
		if ($Context->Debug > 0) {
			$this->ShowIndent($Context->Indent);
			printf("Executing rule: %s\n",$this->Grammar->RuleArray[$Token->ReductionRule]->Description);
		}

		/* For all the sub-Tokens. */
		for ($i = 0; $i < $this->Grammar->RuleArray[$Token->ReductionRule]->SymbolsCount; $i++) {
			
			/* See if the Token is a Symbol or a Rule. */
			if ($Token->Tokens[$i]->ReductionRule < 0) {

				/* It's a Symbol. Make a copy of the Data. Most symbols are grammar,
					 for example '+', 'function', 'while', and such, and you won't
					 need to look at the Data. Other symbols are literals from the input
					 script, for example numbers, strings, variable names, and such. */
				if($Context->ReturnValue != NULL) unset($Context->ReturnValue);
				$Context->ReturnValue = $Token->Tokens[$i]->Data;
				//echo $Context->ReturnValue."\n";
				/* Debugging: show a description of the Symbol, and it's value. */
				if ($Context->Debug > 0) {
					$this->ShowIndent($Context->Indent + 1);
					printf("Token[%u] = Symbol('%s') = '%s'\n",$i,
					$this->Grammar->SymbolArray[$Token->Tokens[$i]->Symbol]->Name,
					$Context->ReturnValue);
				}

			} else {

				/* It's a rule. */

				/* Debugging: show a description of the rule. */
				if ($Context->Debug > 0) {
					$this->ShowIndent($Context->Indent + 1);
					printf("Token[%u] = Rule = %s\n",$i,
					$this->Grammar->RuleArray[$Token->Tokens[$i]->ReductionRule]->Description);
				}

				/* Call the rule's subroutine via the RuleJumpTable. */
				$Context->Indent = $Context->Indent + 1;
				$fn = $this->RuleJumpTable[$Token->Tokens[$i]->ReductionRule];
				$this->$fn($Token->Tokens[$i],$Context);
				$Context->Indent = $Context->Indent - 1;

				/* At this point you will probably want to save the Context->ReturnValue
					 somewhere. */

				/* Debugging: show the value that was returned by the rule's subroutine. */
				if ($Context->Debug > 0) {
					$this->ShowIndent($Context->Indent + 2);
					printf("Result value = %s\n",$Context->ReturnValue);
				}
			}
		}

	}

	/***** Rule subroutines *****************************************************/

	/* 
		Symbol Count: 2
		<Calculations> ::= <Expression> <Calculations> 
	*/
	function Rule_Calculations(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_Calculations\n";

		//<Expression>
		$fn = $this->RuleJumpTable[$Token->Tokens[0]->ReductionRule];
		$expression = $this->$fn($Token->Tokens[0],$Context);

		//<Calculations>
		$fn = $this->RuleJumpTable[$Token->Tokens[1]->ReductionRule];
		$calculations = $this->$fn($Token->Tokens[1],$Context);

		return new CalculationsNode($expression,$calculations);

	}

	/* 
		Symbol Count: 0
		<Calculations> ::=  
	*/
	function Rule_Calculations2(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_Calculations2\n";
		
				return new CalculationsNode();

	}

	/* 
		Symbol Count: 1
		<Expression> ::= <AddExpr> 
	*/
	function Rule_Expression(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_Expression\n";

		//<AddExpr>
		$fn = $this->RuleJumpTable[$Token->Tokens[0]->ReductionRule];
		$addExpr = $this->$fn($Token->Tokens[0],$Context);

		return new ExpressionNode($addExpr);

	}

	/* 
		Symbol Count: 1
		<Expression> ::= SynError 
	*/
	function Rule_Expression_SynError(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_Expression_SynError\n";
		
		//SynError
		$synError = new SynErrorNode($Token->Tokens[0]->Data);

		return new ExpressionNode($synError);

	}

	/* 
		Symbol Count: 1
		<AddExpr> ::= <MulExpr> 
	*/
	function Rule_AddExpr(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_AddExpr\n";

		//<MulExpr>
		$fn = $this->RuleJumpTable[$Token->Tokens[0]->ReductionRule];
		$mulExpr = $this->$fn($Token->Tokens[0],$Context);

		return new AddExprNode($mulExpr);

	}

	/* 
		Symbol Count: 3
		<AddExpr> ::= <AddExpr> <AddOp> <MulExpr> 
	*/
	function Rule_AddExpr2(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_AddExpr2\n";

		//<AddExpr>
		$fn = $this->RuleJumpTable[$Token->Tokens[0]->ReductionRule];
		$addExpr = $this->$fn($Token->Tokens[0],$Context);

		//<AddOp>
		$fn = $this->RuleJumpTable[$Token->Tokens[1]->ReductionRule];
		$addOp = $this->$fn($Token->Tokens[1],$Context);

		//<MulExpr>
		$fn = $this->RuleJumpTable[$Token->Tokens[2]->ReductionRule];
		$mulExpr = $this->$fn($Token->Tokens[2],$Context);

		return new AddExprNode($addExpr,$addOp,$mulExpr);

	}

	/* 
		Symbol Count: 1
		<MulExpr> ::= <Factor> 
	*/
	function Rule_MulExpr(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_MulExpr\n";

		//<Factor>
		$fn = $this->RuleJumpTable[$Token->Tokens[0]->ReductionRule];
		$factor = $this->$fn($Token->Tokens[0],$Context);

		return new MulExprNode($factor);

	}

	/* 
		Symbol Count: 3
		<MulExpr> ::= <MulExpr> <MulOp> <Factor> 
	*/
	function Rule_MulExpr2(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_MulExpr2\n";

		//<MulExpr>
		$fn = $this->RuleJumpTable[$Token->Tokens[0]->ReductionRule];
		$mulExpr = $this->$fn($Token->Tokens[0],$Context);

		//<MulOp>
		$fn = $this->RuleJumpTable[$Token->Tokens[1]->ReductionRule];
		$mulOp = $this->$fn($Token->Tokens[1],$Context);

		//<Factor>
		$fn = $this->RuleJumpTable[$Token->Tokens[2]->ReductionRule];
		$factor = $this->$fn($Token->Tokens[2],$Context);

		return new MulExprNode($mulExpr,$mulOp,$factor);

	}

	/* 
		Symbol Count: 1
		<Factor> ::= DecLiteral 
	*/
	function Rule_Factor_DecLiteral(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_Factor_DecLiteral\n";
		
		//DecLiteral
		$decLiteral = new DecLiteralNode($Token->Tokens[0]->Data);

		return new FactorNode($decLiteral);

	}

	/* 
		Symbol Count: 1
		<Factor> ::= FloatLiteral 
	*/
	function Rule_Factor_FloatLiteral(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_Factor_FloatLiteral\n";
		
		//FloatLiteral
		$floatLiteral = new FloatLiteralNode($Token->Tokens[0]->Data);

		return new FactorNode($floatLiteral);

	}

	/* 
		Symbol Count: 1
		<Factor> ::= StringLiteral 
	*/
	function Rule_Factor_StringLiteral(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_Factor_StringLiteral\n";

		//StringLiteral
		$stringLiteral = new StringLiteralNode($Token->Tokens[0]->Data);

		return new FactorNode($stringLiteral);


	}

	/* 
		Symbol Count: 4
		<Factor> ::= Id '(' <Params> ')' 
	*/
	function Rule_Factor_Id_LParan_RParan(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_Factor_Id_LParan_RParan\n";
		
		//Id
		$id = new IdNode($Token->Tokens[0]->Data);

		//'('
		$char1 = '(';
		//<Params>
		$fn = $this->RuleJumpTable[$Token->Tokens[2]->ReductionRule];
		$params = $this->$fn($Token->Tokens[2],$Context);

		//')'
		$char2 = ')';
		return new FactorNode($id,$char1,$params,$char2);

	}

	/* 
		Symbol Count: 3
		<Factor> ::= '(' <Expression> ')' 
	*/
	function Rule_Factor_LParan_RParan(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_Factor_LParan_RParan\n";

		//'('
		$char1 = '(';
		//<Expression>
		$fn = $this->RuleJumpTable[$Token->Tokens[1]->ReductionRule];
		$expression = $this->$fn($Token->Tokens[1],$Context);

		//')'
		$char2 = ')';
		return new FactorNode($char1,$expression,$char2);

	}

	/* 
		Symbol Count: 2
		<Factor> ::= '+' <Factor> 
	*/
	function Rule_Factor_Plus(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_Factor_Plus\n";

		//'+'
		$char1 = '+';
		//<Factor>
		$fn = $this->RuleJumpTable[$Token->Tokens[1]->ReductionRule];
		$factor = $this->$fn($Token->Tokens[1],$Context);

		return new FactorNode($char1,$factor);

	}

	/* 
		Symbol Count: 2
		<Factor> ::= '-' <Factor> 
	*/
	function Rule_Factor_Minus(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_Factor_Minus\n";

		//'-'
		$char1 = '-';
		//<Factor>
		$fn = $this->RuleJumpTable[$Token->Tokens[1]->ReductionRule];
		$factor = $this->$fn($Token->Tokens[1],$Context);

		return new FactorNode($char1,$factor);

	}

	/* 
		Symbol Count: 1
		<AddOp> ::= '+' 
	*/
	function Rule_AddOp_Plus(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_AddOp_Plus\n";

		//'+'
		$char1 = '+';
		return new AddOpNode($char1);

	}

	/* 
		Symbol Count: 1
		<AddOp> ::= '-' 
	*/
	function Rule_AddOp_Minus(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_AddOp_Minus\n";

		//'-'
		$char1 = '-';
		return new AddOpNode($char1);

	}

	/* 
		Symbol Count: 1
		<MulOp> ::= '*' 
	*/
	function Rule_MulOp_Times(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_MulOp_Times\n";
		
		//'*'
		$char1 = '*';
		return new MulOpNode($char1);

	}

	/* 
		Symbol Count: 1
		<MulOp> ::= '/' 
	*/
	function Rule_MulOp_Div(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_MulOp_Div\n";
		
		//'/'
		$char1 = '/';
		return new MulOpNode($char1);

	}

	/* 
		Symbol Count: 3
		<Params> ::= <Expression> ',' <Params> 
	*/
	function Rule_Params_Comma(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_Params_Comma\n";
		
		//<Expression>
		$fn = $this->RuleJumpTable[$Token->Tokens[0]->ReductionRule];
		$expression = $this->$fn($Token->Tokens[0],$Context);

		//','
		$char1 = ',';
		//<Params>
		$fn = $this->RuleJumpTable[$Token->Tokens[2]->ReductionRule];
		$params = $this->$fn($Token->Tokens[2],$Context);

		return new ParamsNode($expression,$char1,$params);

	}

	/* 
		Symbol Count: 1
		<Params> ::= <Expression> 
	*/
	function Rule_Params(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_Params\n";
		
		//<Expression>
		$fn = $this->RuleJumpTable[$Token->Tokens[0]->ReductionRule];
		$expression = $this->$fn($Token->Tokens[0],$Context);

		return new ParamsNode($expression);

	}

	/* 
		Symbol Count: 0
		<Params> ::=  
	*/
	function Rule_Params2(TokenStruct $Token,ContextStruct $Context) {
		//echo "Calling Rule_Params2\n";

				return new ParamsNode();

	}


	public function initGrammar(){

		$GrammarCharset0CharCount = 7;
		$GrammarCharset0 = array(
			9,
			10,
			11,
			12,
			13,
			32,
			160,
			0
		);

		$GrammarCharset1CharCount = 1;
		$GrammarCharset1 = array(
			35,
			0
		);

		$GrammarCharset2CharCount = 1;
		$GrammarCharset2 = array(
			39,
			0
		);

		$GrammarCharset3CharCount = 1;
		$GrammarCharset3 = array(
			40,
			0
		);

		$GrammarCharset4CharCount = 1;
		$GrammarCharset4 = array(
			41,
			0
		);

		$GrammarCharset5CharCount = 1;
		$GrammarCharset5 = array(
			44,
			0
		);

		$GrammarCharset6CharCount = 1;
		$GrammarCharset6 = array(
			43,
			0
		);

		$GrammarCharset7CharCount = 1;
		$GrammarCharset7 = array(
			48,
			0
		);

		$GrammarCharset8CharCount = 1;
		$GrammarCharset8 = array(
			46,
			0
		);

		$GrammarCharset9CharCount = 51;
		$GrammarCharset9 = array(
			65,
			66,
			67,
			68,
			69,
			70,
			71,
			72,
			73,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			84,
			85,
			86,
			87,
			88,
			89,
			90,
			95,
			97,
			98,
			99,
			100,
			101,
			102,
			103,
			104,
			105,
			106,
			107,
			108,
			109,
			110,
			111,
			112,
			113,
			114,
			115,
			116,
			117,
			118,
			119,
			120,
			121,
			122,
			0
		);

		$GrammarCharset10CharCount = 1;
		$GrammarCharset10 = array(
			34,
			0
		);

		$GrammarCharset11CharCount = 1;
		$GrammarCharset11 = array(
			42,
			0
		);

		$GrammarCharset12CharCount = 1;
		$GrammarCharset12 = array(
			45,
			0
		);

		$GrammarCharset13CharCount = 1;
		$GrammarCharset13 = array(
			47,
			0
		);

		$GrammarCharset14CharCount = 9;
		$GrammarCharset14 = array(
			49,
			50,
			51,
			52,
			53,
			54,
			55,
			56,
			57,
			0
		);

		$GrammarCharset15CharCount = 1;
		$GrammarCharset15 = array(
			82,
			0
		);

		$GrammarCharset16CharCount = 1;
		$GrammarCharset16 = array(
			83,
			0
		);

		$GrammarCharset17CharCount = 10;
		$GrammarCharset17 = array(
			48,
			49,
			50,
			51,
			52,
			53,
			54,
			55,
			56,
			57,
			0
		);

		$GrammarCharset18CharCount = 63;
		$GrammarCharset18 = array(
			48,
			49,
			50,
			51,
			52,
			53,
			54,
			55,
			56,
			57,
			65,
			66,
			67,
			68,
			69,
			70,
			71,
			72,
			73,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			82,
			83,
			84,
			85,
			86,
			87,
			88,
			89,
			90,
			95,
			97,
			98,
			99,
			100,
			101,
			102,
			103,
			104,
			105,
			106,
			107,
			108,
			109,
			110,
			111,
			112,
			113,
			114,
			115,
			116,
			117,
			118,
			119,
			120,
			121,
			122,
			0
		);

		$GrammarCharset19CharCount = 94;
		$GrammarCharset19 = array(
			32,
			33,
			35,
			36,
			37,
			38,
			39,
			40,
			41,
			42,
			43,
			44,
			45,
			46,
			47,
			48,
			49,
			50,
			51,
			52,
			53,
			54,
			55,
			56,
			57,
			58,
			59,
			60,
			61,
			62,
			63,
			64,
			65,
			66,
			67,
			68,
			69,
			70,
			71,
			72,
			73,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			82,
			83,
			84,
			85,
			86,
			87,
			88,
			89,
			90,
			91,
			93,
			94,
			95,
			96,
			97,
			98,
			99,
			100,
			101,
			102,
			103,
			104,
			105,
			106,
			107,
			108,
			109,
			110,
			111,
			112,
			113,
			114,
			115,
			116,
			117,
			118,
			119,
			120,
			121,
			122,
			123,
			124,
			125,
			126,
			160,
			0
		);

		$GrammarCharset20CharCount = 1;
		$GrammarCharset20 = array(
			92,
			0
		);

		$GrammarCharset21CharCount = 62;
		$GrammarCharset21 = array(
			48,
			49,
			50,
			51,
			52,
			53,
			54,
			55,
			56,
			57,
			65,
			66,
			67,
			68,
			70,
			71,
			72,
			73,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			82,
			83,
			84,
			85,
			86,
			87,
			88,
			89,
			90,
			95,
			97,
			98,
			99,
			100,
			101,
			102,
			103,
			104,
			105,
			106,
			107,
			108,
			109,
			110,
			111,
			112,
			113,
			114,
			115,
			116,
			117,
			118,
			119,
			120,
			121,
			122,
			0
		);

		$GrammarCharset22CharCount = 1;
		$GrammarCharset22 = array(
			69,
			0
		);

		$GrammarCharset23CharCount = 62;
		$GrammarCharset23 = array(
			48,
			49,
			50,
			51,
			52,
			53,
			54,
			55,
			56,
			57,
			65,
			66,
			67,
			68,
			69,
			70,
			71,
			72,
			73,
			74,
			75,
			76,
			78,
			79,
			80,
			81,
			82,
			83,
			84,
			85,
			86,
			87,
			88,
			89,
			90,
			95,
			97,
			98,
			99,
			100,
			101,
			102,
			103,
			104,
			105,
			106,
			107,
			108,
			109,
			110,
			111,
			112,
			113,
			114,
			115,
			116,
			117,
			118,
			119,
			120,
			121,
			122,
			0
		);

		$GrammarCharset24CharCount = 1;
		$GrammarCharset24 = array(
			77,
			0
		);

		$GrammarCharset25CharCount = 62;
		$GrammarCharset25 = array(
			48,
			49,
			50,
			51,
			52,
			53,
			54,
			55,
			56,
			57,
			65,
			66,
			67,
			68,
			69,
			70,
			71,
			72,
			73,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			82,
			83,
			84,
			85,
			86,
			87,
			88,
			89,
			90,
			95,
			97,
			98,
			99,
			100,
			101,
			102,
			103,
			104,
			105,
			106,
			107,
			108,
			109,
			110,
			111,
			112,
			113,
			114,
			115,
			116,
			117,
			118,
			119,
			120,
			122,
			0
		);

		$GrammarCharset26CharCount = 1;
		$GrammarCharset26 = array(
			121,
			0
		);

		$GrammarCharset27CharCount = 62;
		$GrammarCharset27 = array(
			48,
			49,
			50,
			51,
			52,
			53,
			54,
			55,
			56,
			57,
			65,
			66,
			67,
			68,
			69,
			70,
			71,
			72,
			73,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			82,
			83,
			84,
			85,
			86,
			87,
			88,
			89,
			90,
			95,
			97,
			98,
			99,
			100,
			101,
			102,
			103,
			104,
			105,
			106,
			107,
			108,
			109,
			111,
			112,
			113,
			114,
			115,
			116,
			117,
			118,
			119,
			120,
			121,
			122,
			0
		);

		$GrammarCharset28CharCount = 1;
		$GrammarCharset28 = array(
			110,
			0
		);

		$GrammarCharset29CharCount = 62;
		$GrammarCharset29 = array(
			48,
			49,
			50,
			51,
			52,
			53,
			54,
			55,
			56,
			57,
			65,
			66,
			67,
			68,
			69,
			70,
			71,
			72,
			73,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			82,
			83,
			84,
			85,
			86,
			87,
			88,
			89,
			90,
			95,
			97,
			98,
			99,
			100,
			101,
			102,
			103,
			104,
			105,
			106,
			107,
			108,
			109,
			110,
			111,
			112,
			113,
			115,
			116,
			117,
			118,
			119,
			120,
			121,
			122,
			0
		);

		$GrammarCharset30CharCount = 1;
		$GrammarCharset30 = array(
			114,
			0
		);

		$GrammarCharset31CharCount = 62;
		$GrammarCharset31 = array(
			48,
			49,
			50,
			51,
			52,
			53,
			54,
			55,
			56,
			57,
			65,
			66,
			67,
			68,
			69,
			70,
			71,
			72,
			73,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			82,
			83,
			84,
			85,
			86,
			87,
			88,
			89,
			90,
			95,
			97,
			98,
			99,
			100,
			101,
			102,
			103,
			104,
			105,
			106,
			107,
			108,
			109,
			110,
			112,
			113,
			114,
			115,
			116,
			117,
			118,
			119,
			120,
			121,
			122,
			0
		);

		$GrammarCharset32CharCount = 1;
		$GrammarCharset32 = array(
			111,
			0
		);


		$GrammarDfaEdgeArray0 = array(
			new DfaEdgeStruct(1,$GrammarCharset0CharCount,$GrammarCharset0),
			new DfaEdgeStruct(2,$GrammarCharset1CharCount,$GrammarCharset1),
			new DfaEdgeStruct(3,$GrammarCharset2CharCount,$GrammarCharset2),
			new DfaEdgeStruct(4,$GrammarCharset3CharCount,$GrammarCharset3),
			new DfaEdgeStruct(5,$GrammarCharset4CharCount,$GrammarCharset4),
			new DfaEdgeStruct(6,$GrammarCharset5CharCount,$GrammarCharset5),
			new DfaEdgeStruct(7,$GrammarCharset6CharCount,$GrammarCharset6),
			new DfaEdgeStruct(8,$GrammarCharset7CharCount,$GrammarCharset7),
			new DfaEdgeStruct(9,$GrammarCharset8CharCount,$GrammarCharset8),
			new DfaEdgeStruct(11,$GrammarCharset9CharCount,$GrammarCharset9),
			new DfaEdgeStruct(13,$GrammarCharset10CharCount,$GrammarCharset10),
			new DfaEdgeStruct(20,$GrammarCharset11CharCount,$GrammarCharset11),
			new DfaEdgeStruct(22,$GrammarCharset12CharCount,$GrammarCharset12),
			new DfaEdgeStruct(24,$GrammarCharset13CharCount,$GrammarCharset13),
			new DfaEdgeStruct(27,$GrammarCharset14CharCount,$GrammarCharset14),
			new DfaEdgeStruct(29,$GrammarCharset15CharCount,$GrammarCharset15),
			new DfaEdgeStruct(32,$GrammarCharset16CharCount,$GrammarCharset16),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray1 = array(
			new DfaEdgeStruct(1,$GrammarCharset0CharCount,$GrammarCharset0),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray2 = array(
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray3 = array(
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray4 = array(
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray5 = array(
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray6 = array(
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray7 = array(
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray8 = array(
			new DfaEdgeStruct(8,$GrammarCharset17CharCount,$GrammarCharset17),
			new DfaEdgeStruct(9,$GrammarCharset8CharCount,$GrammarCharset8),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray9 = array(
			new DfaEdgeStruct(10,$GrammarCharset17CharCount,$GrammarCharset17),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray10 = array(
			new DfaEdgeStruct(10,$GrammarCharset17CharCount,$GrammarCharset17),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray11 = array(
			new DfaEdgeStruct(12,$GrammarCharset18CharCount,$GrammarCharset18),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray12 = array(
			new DfaEdgeStruct(12,$GrammarCharset18CharCount,$GrammarCharset18),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray13 = array(
			new DfaEdgeStruct(14,$GrammarCharset19CharCount,$GrammarCharset19),
			new DfaEdgeStruct(15,$GrammarCharset10CharCount,$GrammarCharset10),
			new DfaEdgeStruct(16,$GrammarCharset20CharCount,$GrammarCharset20),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray14 = array(
			new DfaEdgeStruct(14,$GrammarCharset19CharCount,$GrammarCharset19),
			new DfaEdgeStruct(15,$GrammarCharset10CharCount,$GrammarCharset10),
			new DfaEdgeStruct(16,$GrammarCharset20CharCount,$GrammarCharset20),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray15 = array(
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray16 = array(
			new DfaEdgeStruct(17,$GrammarCharset19CharCount,$GrammarCharset19),
			new DfaEdgeStruct(18,$GrammarCharset10CharCount,$GrammarCharset10),
			new DfaEdgeStruct(19,$GrammarCharset20CharCount,$GrammarCharset20),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray17 = array(
			new DfaEdgeStruct(14,$GrammarCharset19CharCount,$GrammarCharset19),
			new DfaEdgeStruct(15,$GrammarCharset10CharCount,$GrammarCharset10),
			new DfaEdgeStruct(16,$GrammarCharset20CharCount,$GrammarCharset20),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray18 = array(
			new DfaEdgeStruct(14,$GrammarCharset19CharCount,$GrammarCharset19),
			new DfaEdgeStruct(15,$GrammarCharset10CharCount,$GrammarCharset10),
			new DfaEdgeStruct(16,$GrammarCharset20CharCount,$GrammarCharset20),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray19 = array(
			new DfaEdgeStruct(17,$GrammarCharset19CharCount,$GrammarCharset19),
			new DfaEdgeStruct(18,$GrammarCharset10CharCount,$GrammarCharset10),
			new DfaEdgeStruct(19,$GrammarCharset20CharCount,$GrammarCharset20),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray20 = array(
			new DfaEdgeStruct(21,$GrammarCharset13CharCount,$GrammarCharset13),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray21 = array(
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray22 = array(
			new DfaEdgeStruct(23,$GrammarCharset12CharCount,$GrammarCharset12),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray23 = array(
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray24 = array(
			new DfaEdgeStruct(25,$GrammarCharset13CharCount,$GrammarCharset13),
			new DfaEdgeStruct(26,$GrammarCharset11CharCount,$GrammarCharset11),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray25 = array(
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray26 = array(
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray27 = array(
			new DfaEdgeStruct(9,$GrammarCharset8CharCount,$GrammarCharset8),
			new DfaEdgeStruct(28,$GrammarCharset17CharCount,$GrammarCharset17),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray28 = array(
			new DfaEdgeStruct(9,$GrammarCharset8CharCount,$GrammarCharset8),
			new DfaEdgeStruct(28,$GrammarCharset17CharCount,$GrammarCharset17),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray29 = array(
			new DfaEdgeStruct(12,$GrammarCharset21CharCount,$GrammarCharset21),
			new DfaEdgeStruct(30,$GrammarCharset22CharCount,$GrammarCharset22),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray30 = array(
			new DfaEdgeStruct(12,$GrammarCharset23CharCount,$GrammarCharset23),
			new DfaEdgeStruct(31,$GrammarCharset24CharCount,$GrammarCharset24),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray31 = array(
			new DfaEdgeStruct(12,$GrammarCharset18CharCount,$GrammarCharset18),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray32 = array(
			new DfaEdgeStruct(12,$GrammarCharset25CharCount,$GrammarCharset25),
			new DfaEdgeStruct(33,$GrammarCharset26CharCount,$GrammarCharset26),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray33 = array(
			new DfaEdgeStruct(12,$GrammarCharset27CharCount,$GrammarCharset27),
			new DfaEdgeStruct(34,$GrammarCharset28CharCount,$GrammarCharset28),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray34 = array(
			new DfaEdgeStruct(12,$GrammarCharset21CharCount,$GrammarCharset21),
			new DfaEdgeStruct(35,$GrammarCharset22CharCount,$GrammarCharset22),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray35 = array(
			new DfaEdgeStruct(12,$GrammarCharset29CharCount,$GrammarCharset29),
			new DfaEdgeStruct(36,$GrammarCharset30CharCount,$GrammarCharset30),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray36 = array(
			new DfaEdgeStruct(12,$GrammarCharset29CharCount,$GrammarCharset29),
			new DfaEdgeStruct(37,$GrammarCharset30CharCount,$GrammarCharset30),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray37 = array(
			new DfaEdgeStruct(12,$GrammarCharset31CharCount,$GrammarCharset31),
			new DfaEdgeStruct(38,$GrammarCharset32CharCount,$GrammarCharset32),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray38 = array(
			new DfaEdgeStruct(12,$GrammarCharset29CharCount,$GrammarCharset29),
			new DfaEdgeStruct(39,$GrammarCharset30CharCount,$GrammarCharset30),
			new DfaEdgeStruct(-1,0,NULL)
		);

		$GrammarDfaEdgeArray39 = array(
			new DfaEdgeStruct(12,$GrammarCharset18CharCount,$GrammarCharset18),
			new DfaEdgeStruct(-1,0,NULL)
		);


		$GrammarRuleSymbolArray0 = array(
			21,
			20,
			-1
		);

		$GrammarRuleSymbolArray1 = array(
			-1
		);

		$GrammarRuleSymbolArray2 = array(
			18,
			-1
		);

		$GrammarRuleSymbolArray3 = array(
			17,
			-1
		);

		$GrammarRuleSymbolArray4 = array(
			23,
			-1
		);

		$GrammarRuleSymbolArray5 = array(
			18,
			19,
			23,
			-1
		);

		$GrammarRuleSymbolArray6 = array(
			22,
			-1
		);

		$GrammarRuleSymbolArray7 = array(
			23,
			24,
			22,
			-1
		);

		$GrammarRuleSymbolArray8 = array(
			13,
			-1
		);

		$GrammarRuleSymbolArray9 = array(
			14,
			-1
		);

		$GrammarRuleSymbolArray10 = array(
			16,
			-1
		);

		$GrammarRuleSymbolArray11 = array(
			15,
			7,
			25,
			8,
			-1
		);

		$GrammarRuleSymbolArray12 = array(
			7,
			21,
			8,
			-1
		);

		$GrammarRuleSymbolArray13 = array(
			12,
			22,
			-1
		);

		$GrammarRuleSymbolArray14 = array(
			6,
			22,
			-1
		);

		$GrammarRuleSymbolArray15 = array(
			12,
			-1
		);

		$GrammarRuleSymbolArray16 = array(
			6,
			-1
		);

		$GrammarRuleSymbolArray17 = array(
			9,
			-1
		);

		$GrammarRuleSymbolArray18 = array(
			11,
			-1
		);

		$GrammarRuleSymbolArray19 = array(
			21,
			10,
			25,
			-1
		);

		$GrammarRuleSymbolArray20 = array(
			21,
			-1
		);

		$GrammarRuleSymbolArray21 = array(
			-1
		);


		$GrammarLalrActionArray0 = array(
			new ActionStruct(6,1,1),
			new ActionStruct(7,1,2),
			new ActionStruct(12,1,3),
			new ActionStruct(13,1,4),
			new ActionStruct(14,1,5),
			new ActionStruct(15,1,6),
			new ActionStruct(16,1,7),
			new ActionStruct(17,1,8),
			new ActionStruct(18,3,9),
			new ActionStruct(20,3,10),
			new ActionStruct(21,3,11),
			new ActionStruct(22,3,12),
			new ActionStruct(23,3,13),
			new ActionStruct(0,2,1),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray1 = array(
			new ActionStruct(6,1,1),
			new ActionStruct(7,1,2),
			new ActionStruct(12,1,3),
			new ActionStruct(13,1,4),
			new ActionStruct(14,1,5),
			new ActionStruct(15,1,6),
			new ActionStruct(16,1,7),
			new ActionStruct(22,3,14),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray2 = array(
			new ActionStruct(6,1,1),
			new ActionStruct(7,1,2),
			new ActionStruct(12,1,3),
			new ActionStruct(13,1,4),
			new ActionStruct(14,1,5),
			new ActionStruct(15,1,6),
			new ActionStruct(16,1,7),
			new ActionStruct(17,1,8),
			new ActionStruct(18,3,9),
			new ActionStruct(21,3,15),
			new ActionStruct(22,3,12),
			new ActionStruct(23,3,13),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray3 = array(
			new ActionStruct(6,1,1),
			new ActionStruct(7,1,2),
			new ActionStruct(12,1,3),
			new ActionStruct(13,1,4),
			new ActionStruct(14,1,5),
			new ActionStruct(15,1,6),
			new ActionStruct(16,1,7),
			new ActionStruct(22,3,16),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray4 = array(
			new ActionStruct(0,2,8),
			new ActionStruct(6,2,8),
			new ActionStruct(7,2,8),
			new ActionStruct(8,2,8),
			new ActionStruct(9,2,8),
			new ActionStruct(10,2,8),
			new ActionStruct(11,2,8),
			new ActionStruct(12,2,8),
			new ActionStruct(13,2,8),
			new ActionStruct(14,2,8),
			new ActionStruct(15,2,8),
			new ActionStruct(16,2,8),
			new ActionStruct(17,2,8),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray5 = array(
			new ActionStruct(0,2,9),
			new ActionStruct(6,2,9),
			new ActionStruct(7,2,9),
			new ActionStruct(8,2,9),
			new ActionStruct(9,2,9),
			new ActionStruct(10,2,9),
			new ActionStruct(11,2,9),
			new ActionStruct(12,2,9),
			new ActionStruct(13,2,9),
			new ActionStruct(14,2,9),
			new ActionStruct(15,2,9),
			new ActionStruct(16,2,9),
			new ActionStruct(17,2,9),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray6 = array(
			new ActionStruct(7,1,17),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray7 = array(
			new ActionStruct(0,2,10),
			new ActionStruct(6,2,10),
			new ActionStruct(7,2,10),
			new ActionStruct(8,2,10),
			new ActionStruct(9,2,10),
			new ActionStruct(10,2,10),
			new ActionStruct(11,2,10),
			new ActionStruct(12,2,10),
			new ActionStruct(13,2,10),
			new ActionStruct(14,2,10),
			new ActionStruct(15,2,10),
			new ActionStruct(16,2,10),
			new ActionStruct(17,2,10),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray8 = array(
			new ActionStruct(0,2,3),
			new ActionStruct(6,2,3),
			new ActionStruct(7,2,3),
			new ActionStruct(8,2,3),
			new ActionStruct(10,2,3),
			new ActionStruct(12,2,3),
			new ActionStruct(13,2,3),
			new ActionStruct(14,2,3),
			new ActionStruct(15,2,3),
			new ActionStruct(16,2,3),
			new ActionStruct(17,2,3),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray9 = array(
			new ActionStruct(6,1,18),
			new ActionStruct(12,1,19),
			new ActionStruct(19,3,20),
			new ActionStruct(0,2,2),
			new ActionStruct(7,2,2),
			new ActionStruct(8,2,2),
			new ActionStruct(10,2,2),
			new ActionStruct(13,2,2),
			new ActionStruct(14,2,2),
			new ActionStruct(15,2,2),
			new ActionStruct(16,2,2),
			new ActionStruct(17,2,2),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray10 = array(
			new ActionStruct(0,4,0),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray11 = array(
			new ActionStruct(6,1,1),
			new ActionStruct(7,1,2),
			new ActionStruct(12,1,3),
			new ActionStruct(13,1,4),
			new ActionStruct(14,1,5),
			new ActionStruct(15,1,6),
			new ActionStruct(16,1,7),
			new ActionStruct(17,1,8),
			new ActionStruct(18,3,9),
			new ActionStruct(20,3,21),
			new ActionStruct(21,3,11),
			new ActionStruct(22,3,12),
			new ActionStruct(23,3,13),
			new ActionStruct(0,2,1),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray12 = array(
			new ActionStruct(0,2,6),
			new ActionStruct(6,2,6),
			new ActionStruct(7,2,6),
			new ActionStruct(8,2,6),
			new ActionStruct(9,2,6),
			new ActionStruct(10,2,6),
			new ActionStruct(11,2,6),
			new ActionStruct(12,2,6),
			new ActionStruct(13,2,6),
			new ActionStruct(14,2,6),
			new ActionStruct(15,2,6),
			new ActionStruct(16,2,6),
			new ActionStruct(17,2,6),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray13 = array(
			new ActionStruct(9,1,22),
			new ActionStruct(11,1,23),
			new ActionStruct(24,3,24),
			new ActionStruct(0,2,4),
			new ActionStruct(6,2,4),
			new ActionStruct(7,2,4),
			new ActionStruct(8,2,4),
			new ActionStruct(10,2,4),
			new ActionStruct(12,2,4),
			new ActionStruct(13,2,4),
			new ActionStruct(14,2,4),
			new ActionStruct(15,2,4),
			new ActionStruct(16,2,4),
			new ActionStruct(17,2,4),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray14 = array(
			new ActionStruct(0,2,14),
			new ActionStruct(6,2,14),
			new ActionStruct(7,2,14),
			new ActionStruct(8,2,14),
			new ActionStruct(9,2,14),
			new ActionStruct(10,2,14),
			new ActionStruct(11,2,14),
			new ActionStruct(12,2,14),
			new ActionStruct(13,2,14),
			new ActionStruct(14,2,14),
			new ActionStruct(15,2,14),
			new ActionStruct(16,2,14),
			new ActionStruct(17,2,14),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray15 = array(
			new ActionStruct(8,1,25),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray16 = array(
			new ActionStruct(0,2,13),
			new ActionStruct(6,2,13),
			new ActionStruct(7,2,13),
			new ActionStruct(8,2,13),
			new ActionStruct(9,2,13),
			new ActionStruct(10,2,13),
			new ActionStruct(11,2,13),
			new ActionStruct(12,2,13),
			new ActionStruct(13,2,13),
			new ActionStruct(14,2,13),
			new ActionStruct(15,2,13),
			new ActionStruct(16,2,13),
			new ActionStruct(17,2,13),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray17 = array(
			new ActionStruct(6,1,1),
			new ActionStruct(7,1,2),
			new ActionStruct(12,1,3),
			new ActionStruct(13,1,4),
			new ActionStruct(14,1,5),
			new ActionStruct(15,1,6),
			new ActionStruct(16,1,7),
			new ActionStruct(17,1,8),
			new ActionStruct(18,3,9),
			new ActionStruct(21,3,26),
			new ActionStruct(22,3,12),
			new ActionStruct(23,3,13),
			new ActionStruct(25,3,27),
			new ActionStruct(8,2,21),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray18 = array(
			new ActionStruct(6,2,16),
			new ActionStruct(7,2,16),
			new ActionStruct(12,2,16),
			new ActionStruct(13,2,16),
			new ActionStruct(14,2,16),
			new ActionStruct(15,2,16),
			new ActionStruct(16,2,16),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray19 = array(
			new ActionStruct(6,2,15),
			new ActionStruct(7,2,15),
			new ActionStruct(12,2,15),
			new ActionStruct(13,2,15),
			new ActionStruct(14,2,15),
			new ActionStruct(15,2,15),
			new ActionStruct(16,2,15),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray20 = array(
			new ActionStruct(6,1,1),
			new ActionStruct(7,1,2),
			new ActionStruct(12,1,3),
			new ActionStruct(13,1,4),
			new ActionStruct(14,1,5),
			new ActionStruct(15,1,6),
			new ActionStruct(16,1,7),
			new ActionStruct(22,3,12),
			new ActionStruct(23,3,28),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray21 = array(
			new ActionStruct(0,2,0),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray22 = array(
			new ActionStruct(6,2,17),
			new ActionStruct(7,2,17),
			new ActionStruct(12,2,17),
			new ActionStruct(13,2,17),
			new ActionStruct(14,2,17),
			new ActionStruct(15,2,17),
			new ActionStruct(16,2,17),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray23 = array(
			new ActionStruct(6,2,18),
			new ActionStruct(7,2,18),
			new ActionStruct(12,2,18),
			new ActionStruct(13,2,18),
			new ActionStruct(14,2,18),
			new ActionStruct(15,2,18),
			new ActionStruct(16,2,18),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray24 = array(
			new ActionStruct(6,1,1),
			new ActionStruct(7,1,2),
			new ActionStruct(12,1,3),
			new ActionStruct(13,1,4),
			new ActionStruct(14,1,5),
			new ActionStruct(15,1,6),
			new ActionStruct(16,1,7),
			new ActionStruct(22,3,29),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray25 = array(
			new ActionStruct(0,2,12),
			new ActionStruct(6,2,12),
			new ActionStruct(7,2,12),
			new ActionStruct(8,2,12),
			new ActionStruct(9,2,12),
			new ActionStruct(10,2,12),
			new ActionStruct(11,2,12),
			new ActionStruct(12,2,12),
			new ActionStruct(13,2,12),
			new ActionStruct(14,2,12),
			new ActionStruct(15,2,12),
			new ActionStruct(16,2,12),
			new ActionStruct(17,2,12),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray26 = array(
			new ActionStruct(10,1,30),
			new ActionStruct(8,2,20),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray27 = array(
			new ActionStruct(8,1,31),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray28 = array(
			new ActionStruct(9,1,22),
			new ActionStruct(11,1,23),
			new ActionStruct(24,3,24),
			new ActionStruct(0,2,5),
			new ActionStruct(6,2,5),
			new ActionStruct(7,2,5),
			new ActionStruct(8,2,5),
			new ActionStruct(10,2,5),
			new ActionStruct(12,2,5),
			new ActionStruct(13,2,5),
			new ActionStruct(14,2,5),
			new ActionStruct(15,2,5),
			new ActionStruct(16,2,5),
			new ActionStruct(17,2,5),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray29 = array(
			new ActionStruct(0,2,7),
			new ActionStruct(6,2,7),
			new ActionStruct(7,2,7),
			new ActionStruct(8,2,7),
			new ActionStruct(9,2,7),
			new ActionStruct(10,2,7),
			new ActionStruct(11,2,7),
			new ActionStruct(12,2,7),
			new ActionStruct(13,2,7),
			new ActionStruct(14,2,7),
			new ActionStruct(15,2,7),
			new ActionStruct(16,2,7),
			new ActionStruct(17,2,7),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray30 = array(
			new ActionStruct(6,1,1),
			new ActionStruct(7,1,2),
			new ActionStruct(12,1,3),
			new ActionStruct(13,1,4),
			new ActionStruct(14,1,5),
			new ActionStruct(15,1,6),
			new ActionStruct(16,1,7),
			new ActionStruct(17,1,8),
			new ActionStruct(18,3,9),
			new ActionStruct(21,3,26),
			new ActionStruct(22,3,12),
			new ActionStruct(23,3,13),
			new ActionStruct(25,3,32),
			new ActionStruct(8,2,21),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray31 = array(
			new ActionStruct(0,2,11),
			new ActionStruct(6,2,11),
			new ActionStruct(7,2,11),
			new ActionStruct(8,2,11),
			new ActionStruct(9,2,11),
			new ActionStruct(10,2,11),
			new ActionStruct(11,2,11),
			new ActionStruct(12,2,11),
			new ActionStruct(13,2,11),
			new ActionStruct(14,2,11),
			new ActionStruct(15,2,11),
			new ActionStruct(16,2,11),
			new ActionStruct(17,2,11),
			new ActionStruct(-1,-1,-1)
		);
		$GrammarLalrActionArray32 = array(
			new ActionStruct(8,2,19),
			new ActionStruct(-1,-1,-1)
		);

		$GrammarSymbolArray = array(
			/*  0 */   
			new SymbolStruct(3,"EOF"),
			/*  1 */   
			new SymbolStruct(7,"Error"),
			/*  2 */   
			new SymbolStruct(2,"Whitespace"),
			/*  3 */   
			new SymbolStruct(5,"Comment End"),
			/*  4 */   
			new SymbolStruct(6,"Comment Line"),
			/*  5 */   
			new SymbolStruct(4,"Comment Start"),
			/*  6 */   
			new SymbolStruct(1,"-"),
			/*  7 */   
			new SymbolStruct(1,"("),
			/*  8 */   
			new SymbolStruct(1,")"),
			/*  9 */   
			new SymbolStruct(1,"*"),
			/* 10 */   
			new SymbolStruct(1,","),
			/* 11 */   
			new SymbolStruct(1,"/"),
			/* 12 */   
			new SymbolStruct(1,"+"),
			/* 13 */   
			new SymbolStruct(1,"DecLiteral"),
			/* 14 */   
			new SymbolStruct(1,"FloatLiteral"),
			/* 15 */   
			new SymbolStruct(1,"Id"),
			/* 16 */   
			new SymbolStruct(1,"StringLiteral"),
			/* 17 */   
			new SymbolStruct(1,"SynError"),
			/* 18 */   
			new SymbolStruct(0,"AddExpr"),
			/* 19 */   
			new SymbolStruct(0,"AddOp"),
			/* 20 */   
			new SymbolStruct(0,"Calculations"),
			/* 21 */   
			new SymbolStruct(0,"Expression"),
			/* 22 */   
			new SymbolStruct(0,"Factor"),
			/* 23 */   
			new SymbolStruct(0,"MulExpr"),
			/* 24 */   
			new SymbolStruct(0,"MulOp"),
			/* 25 */   
			new SymbolStruct(0,"Params") 
		);

		$GrammarDfaStateArray = array(
			/* 0 */    
			new DfaStateStruct(-1,17,$GrammarDfaEdgeArray0),
			/* 1 */    
			new DfaStateStruct(2,1,$GrammarDfaEdgeArray1),
			/* 2 */    
			new DfaStateStruct(4,0,$GrammarDfaEdgeArray2),
			/* 3 */    
			new DfaStateStruct(4,0,$GrammarDfaEdgeArray3),
			/* 4 */    
			new DfaStateStruct(7,0,$GrammarDfaEdgeArray4),
			/* 5 */    
			new DfaStateStruct(8,0,$GrammarDfaEdgeArray5),
			/* 6 */    
			new DfaStateStruct(10,0,$GrammarDfaEdgeArray6),
			/* 7 */    
			new DfaStateStruct(12,0,$GrammarDfaEdgeArray7),
			/* 8 */    
			new DfaStateStruct(-1,2,$GrammarDfaEdgeArray8),
			/* 9 */    
			new DfaStateStruct(-1,1,$GrammarDfaEdgeArray9),
			/* 10 */    
			new DfaStateStruct(14,1,$GrammarDfaEdgeArray10),
			/* 11 */    
			new DfaStateStruct(15,1,$GrammarDfaEdgeArray11),
			/* 12 */    
			new DfaStateStruct(15,1,$GrammarDfaEdgeArray12),
			/* 13 */    
			new DfaStateStruct(-1,3,$GrammarDfaEdgeArray13),
			/* 14 */    
			new DfaStateStruct(-1,3,$GrammarDfaEdgeArray14),
			/* 15 */    
			new DfaStateStruct(16,0,$GrammarDfaEdgeArray15),
			/* 16 */    
			new DfaStateStruct(-1,3,$GrammarDfaEdgeArray16),
			/* 17 */    
			new DfaStateStruct(-1,3,$GrammarDfaEdgeArray17),
			/* 18 */    
			new DfaStateStruct(16,3,$GrammarDfaEdgeArray18),
			/* 19 */    
			new DfaStateStruct(-1,3,$GrammarDfaEdgeArray19),
			/* 20 */    
			new DfaStateStruct(9,1,$GrammarDfaEdgeArray20),
			/* 21 */    
			new DfaStateStruct(3,0,$GrammarDfaEdgeArray21),
			/* 22 */    
			new DfaStateStruct(6,1,$GrammarDfaEdgeArray22),
			/* 23 */    
			new DfaStateStruct(4,0,$GrammarDfaEdgeArray23),
			/* 24 */    
			new DfaStateStruct(11,2,$GrammarDfaEdgeArray24),
			/* 25 */    
			new DfaStateStruct(4,0,$GrammarDfaEdgeArray25),
			/* 26 */    
			new DfaStateStruct(5,0,$GrammarDfaEdgeArray26),
			/* 27 */    
			new DfaStateStruct(13,2,$GrammarDfaEdgeArray27),
			/* 28 */    
			new DfaStateStruct(13,2,$GrammarDfaEdgeArray28),
			/* 29 */    
			new DfaStateStruct(15,2,$GrammarDfaEdgeArray29),
			/* 30 */    
			new DfaStateStruct(15,2,$GrammarDfaEdgeArray30),
			/* 31 */    
			new DfaStateStruct(4,1,$GrammarDfaEdgeArray31),
			/* 32 */    
			new DfaStateStruct(15,2,$GrammarDfaEdgeArray32),
			/* 33 */    
			new DfaStateStruct(15,2,$GrammarDfaEdgeArray33),
			/* 34 */    
			new DfaStateStruct(15,2,$GrammarDfaEdgeArray34),
			/* 35 */    
			new DfaStateStruct(15,2,$GrammarDfaEdgeArray35),
			/* 36 */    
			new DfaStateStruct(15,2,$GrammarDfaEdgeArray36),
			/* 37 */    
			new DfaStateStruct(15,2,$GrammarDfaEdgeArray37),
			/* 38 */    
			new DfaStateStruct(15,2,$GrammarDfaEdgeArray38),
			/* 39 */    
			new DfaStateStruct(17,1,$GrammarDfaEdgeArray39),
			new DfaStateStruct(-1,-1,NULL)
		);

		$GrammarRuleArray = array(
			/*  0 */
			new RuleStruct(20,2,$GrammarRuleSymbolArray0,"<Calculations> ::= <Expression> <Calculations>"),
			/*  1 */
			new RuleStruct(20,0,$GrammarRuleSymbolArray1,"<Calculations> ::= "),
			/*  2 */
			new RuleStruct(21,1,$GrammarRuleSymbolArray2,"<Expression> ::= <AddExpr>"),
			/*  3 */
			new RuleStruct(21,1,$GrammarRuleSymbolArray3,"<Expression> ::= SynError"),
			/*  4 */
			new RuleStruct(18,1,$GrammarRuleSymbolArray4,"<AddExpr> ::= <MulExpr>"),
			/*  5 */
			new RuleStruct(18,3,$GrammarRuleSymbolArray5,"<AddExpr> ::= <AddExpr> <AddOp> <MulExpr>"),
			/*  6 */
			new RuleStruct(23,1,$GrammarRuleSymbolArray6,"<MulExpr> ::= <Factor>"),
			/*  7 */
			new RuleStruct(23,3,$GrammarRuleSymbolArray7,"<MulExpr> ::= <MulExpr> <MulOp> <Factor>"),
			/*  8 */
			new RuleStruct(22,1,$GrammarRuleSymbolArray8,"<Factor> ::= DecLiteral"),
			/*  9 */
			new RuleStruct(22,1,$GrammarRuleSymbolArray9,"<Factor> ::= FloatLiteral"),
			/* 10 */
			new RuleStruct(22,1,$GrammarRuleSymbolArray10,"<Factor> ::= StringLiteral"),
			/* 11 */
			new RuleStruct(22,4,$GrammarRuleSymbolArray11,"<Factor> ::= Id '(' <Params> ')'"),
			/* 12 */
			new RuleStruct(22,3,$GrammarRuleSymbolArray12,"<Factor> ::= '(' <Expression> ')'"),
			/* 13 */
			new RuleStruct(22,2,$GrammarRuleSymbolArray13,"<Factor> ::= '+' <Factor>"),
			/* 14 */
			new RuleStruct(22,2,$GrammarRuleSymbolArray14,"<Factor> ::= '-' <Factor>"),
			/* 15 */
			new RuleStruct(19,1,$GrammarRuleSymbolArray15,"<AddOp> ::= '+'"),
			/* 16 */
			new RuleStruct(19,1,$GrammarRuleSymbolArray16,"<AddOp> ::= '-'"),
			/* 17 */
			new RuleStruct(24,1,$GrammarRuleSymbolArray17,"<MulOp> ::= '*'"),
			/* 18 */
			new RuleStruct(24,1,$GrammarRuleSymbolArray18,"<MulOp> ::= '/'"),
			/* 19 */
			new RuleStruct(25,3,$GrammarRuleSymbolArray19,"<Params> ::= <Expression> ',' <Params>"),
			/* 20 */
			new RuleStruct(25,1,$GrammarRuleSymbolArray20,"<Params> ::= <Expression>"),
			/* 21 */
			new RuleStruct(25,0,$GrammarRuleSymbolArray21,"<Params> ::= ") 
		);

		$GrammarLalrStateArray = array(
			/* 0 */
			new LalrStateStruct(14,$GrammarLalrActionArray0),
			/* 1 */
			new LalrStateStruct(8,$GrammarLalrActionArray1),
			/* 2 */
			new LalrStateStruct(12,$GrammarLalrActionArray2),
			/* 3 */
			new LalrStateStruct(8,$GrammarLalrActionArray3),
			/* 4 */
			new LalrStateStruct(13,$GrammarLalrActionArray4),
			/* 5 */
			new LalrStateStruct(13,$GrammarLalrActionArray5),
			/* 6 */
			new LalrStateStruct(1,$GrammarLalrActionArray6),
			/* 7 */
			new LalrStateStruct(13,$GrammarLalrActionArray7),
			/* 8 */
			new LalrStateStruct(11,$GrammarLalrActionArray8),
			/* 9 */
			new LalrStateStruct(12,$GrammarLalrActionArray9),
			/* 10 */
			new LalrStateStruct(1,$GrammarLalrActionArray10),
			/* 11 */
			new LalrStateStruct(14,$GrammarLalrActionArray11),
			/* 12 */
			new LalrStateStruct(13,$GrammarLalrActionArray12),
			/* 13 */
			new LalrStateStruct(14,$GrammarLalrActionArray13),
			/* 14 */
			new LalrStateStruct(13,$GrammarLalrActionArray14),
			/* 15 */
			new LalrStateStruct(1,$GrammarLalrActionArray15),
			/* 16 */
			new LalrStateStruct(13,$GrammarLalrActionArray16),
			/* 17 */
			new LalrStateStruct(14,$GrammarLalrActionArray17),
			/* 18 */
			new LalrStateStruct(7,$GrammarLalrActionArray18),
			/* 19 */
			new LalrStateStruct(7,$GrammarLalrActionArray19),
			/* 20 */
			new LalrStateStruct(9,$GrammarLalrActionArray20),
			/* 21 */
			new LalrStateStruct(1,$GrammarLalrActionArray21),
			/* 22 */
			new LalrStateStruct(7,$GrammarLalrActionArray22),
			/* 23 */
			new LalrStateStruct(7,$GrammarLalrActionArray23),
			/* 24 */
			new LalrStateStruct(8,$GrammarLalrActionArray24),
			/* 25 */
			new LalrStateStruct(13,$GrammarLalrActionArray25),
			/* 26 */
			new LalrStateStruct(2,$GrammarLalrActionArray26),
			/* 27 */
			new LalrStateStruct(1,$GrammarLalrActionArray27),
			/* 28 */
			new LalrStateStruct(14,$GrammarLalrActionArray28),
			/* 29 */
			new LalrStateStruct(13,$GrammarLalrActionArray29),
			/* 30 */
			new LalrStateStruct(14,$GrammarLalrActionArray30),
			/* 31 */
			new LalrStateStruct(13,$GrammarLalrActionArray31),
			/* 32 */
			new LalrStateStruct(1,$GrammarLalrActionArray32),
			new LalrStateStruct(-1,NULL)
		);

		$this->Grammar = new GrammarStruct();

		/* CaseSensitive */      
		$this->Grammar->CaseSensitive = True;
		/* InitialSymbol */
		$this->Grammar->InitialSymbol = 20;
		/* InitialDfaState */
		$this->Grammar->InitialDfaState = 0;
		/* InitialLalrState */
		$this->Grammar->InitialLalrState = 0;
		/* SymbolCount */        
		$this->Grammar->SymbolCount = 26;
		/* SymbolArray */        
		$this->Grammar->SymbolArray = $GrammarSymbolArray;
		/* RuleCount */          
		$this->Grammar->RuleCount = 22;
		/* RuleArray */          
		$this->Grammar->RuleArray = $GrammarRuleArray;
		/* DfaStateCount */      
		$this->Grammar->DfaStateCount = 40;
		/* DfaArray */           
		$this->Grammar->DfaArray = $GrammarDfaStateArray;
		/* LalrStateCount */     
		$this->Grammar->LalrStateCount = 33;
		/* LalrArray */          
		$this->Grammar->LalrArray = $GrammarLalrStateArray;

		$this->RuleJumpTable = array(
			/* 0. <Calculations> ::= <Expression> <Calculations> */
			'Rule_Calculations',
			/* 1. <Calculations> ::=  */
			'Rule_Calculations2',
			/* 2. <Expression> ::= <AddExpr> */
			'Rule_Expression',
			/* 3. <Expression> ::= SynError */
			'Rule_Expression_SynError',
			/* 4. <AddExpr> ::= <MulExpr> */
			'Rule_AddExpr',
			/* 5. <AddExpr> ::= <AddExpr> <AddOp> <MulExpr> */
			'Rule_AddExpr2',
			/* 6. <MulExpr> ::= <Factor> */
			'Rule_MulExpr',
			/* 7. <MulExpr> ::= <MulExpr> <MulOp> <Factor> */
			'Rule_MulExpr2',
			/* 8. <Factor> ::= DecLiteral */
			'Rule_Factor_DecLiteral',
			/* 9. <Factor> ::= FloatLiteral */
			'Rule_Factor_FloatLiteral',
			/* 10. <Factor> ::= StringLiteral */
			'Rule_Factor_StringLiteral',
			/* 11. <Factor> ::= Id '(' <Params> ')' */
			'Rule_Factor_Id_LParan_RParan',
			/* 12. <Factor> ::= '(' <Expression> ')' */
			'Rule_Factor_LParan_RParan',
			/* 13. <Factor> ::= '+' <Factor> */
			'Rule_Factor_Plus',
			/* 14. <Factor> ::= '-' <Factor> */
			'Rule_Factor_Minus',
			/* 15. <AddOp> ::= '+' */
			'Rule_AddOp_Plus',
			/* 16. <AddOp> ::= '-' */
			'Rule_AddOp_Minus',
			/* 17. <MulOp> ::= '*' */
			'Rule_MulOp_Times',
			/* 18. <MulOp> ::= '/' */
			'Rule_MulOp_Div',
			/* 19. <Params> ::= <Expression> ',' <Params> */
			'Rule_Params_Comma',
			/* 20. <Params> ::= <Expression> */
			'Rule_Params',
			/* 21. <Params> ::=  */
			'Rule_Params2' 
		);

	}

}

?>
